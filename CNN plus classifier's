import tensorflow as tf
from tensorflow.keras.applications import VGG16
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import preprocess_input
from tensorflow.keras.models import Model

def extract_cnn_features(images):
    base_model = VGG16(weights='imagenet', include_top=False)

    # Create a model with outputs from one of the intermediate layers
    model = Model(inputs=base_model.input, outputs=base_model.get_layer('block5_conv2').output)

    cnn_features = []
    for img in images:
        # Preprocess the image
        img = image.img_to_array(img)
        img = np.expand_dims(img, axis=0)
        img = preprocess_input(img)

        # Extract features
        features = model.predict(img)
        cnn_features.append(features.flatten())  # Flatten the features

    return np.array(cnn_features)
cnn_train_features = extract_cnn_features(X_train_filtered)
cnn_test_features = extract_cnn_features(X_test_filtered)

np.save('cnn_train_features.npy', cnn_train_features)
np.save('cnn_test_features.npy', cnn_test_features)
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from xgboost import XGBClassifier
from sklearn.svm import SVC
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score

svm_classifier = SVC()
svm_classifier.fit(cnn_train_features, y_train_filtered)
svm_pred = svm_classifier.predict(cnn_test_features)
svm_accuracy = accuracy_score(y_test_filtered, svm_pred)
print("LBP feature extracted Accuracy:",svm_accuracy)

rf_classifier = RandomForestClassifier()
rf_classifier.fit(cnn_train_features, y_train_filtered)
rf_pred = rf_classifier.predict(cnn_test_features)
rf_accuracy = accuracy_score(y_test_filtered, rf_pred)
print("Random Forest Classifier Accuracy:", rf_accuracy)

knn_classifier = KNeighborsClassifier()
knn_classifier.fit(cnn_train_features, y_train_filtered)
knn_pred = knn_classifier.predict(cnn_test_features)
knn_accuracy = accuracy_score(y_test_filtered, knn_pred)
print("KNN Classifier Accuracy:", knn_accuracy)

gb_classifier = GradientBoostingClassifier()
gb_classifier.fit(cnn_train_features, y_train_filtered)
gb_pred = gb_classifier.predict(cnn_test_features)
gb_accuracy = accuracy_score(y_test_filtered, gb_pred)
print("Gradient Boosting Classifier Accuracy:", gb_accuracy)
