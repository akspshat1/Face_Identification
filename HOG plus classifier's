from skimage.feature import hog
def extract_hog_features(images):
    hog_features = []
    for img in images:
        # Compute HOG features with reduced dimensions
        hog_feature = hog(img, orientations=3, pixels_per_cell=(10, 10),
                          cells_per_block=(1, 1), block_norm='L2-Hys',
                          visualize=False, transform_sqrt=True,
                          feature_vector=True, multichannel=True,
                          channel_axis=-1)  # Specify the channel axis
        hog_features.append(hog_feature)
    return np.array(hog_features)

hog_train_features = extract_hog_features(X_train_filtered)
hog_test_features = extract_hog_features(X_test_filtered)

import numpy as np
np.save('hog_train_features.npy', hog_train_features)
np.save('hog_test_features.npy', hog_test_features)

from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from xgboost import XGBClassifier
from sklearn.svm import SVC
from sklearn.ensemble import GradientBoostingClassifier

svm_classifier = SVC()
svm_classifier.fit(hog_train_features, y_train_filtered)
svm_pred = svm_classifier.predict(hog_test_features)
svm_accuracy = accuracy_score(y_test_filtered, svm_pred)
print("LBP feature extracted Accuracy:",svm_accuracy)

rf_classifier = RandomForestClassifier()
rf_classifier.fit(hog_train_features, y_train_filtered)
rf_pred = rf_classifier.predict(hog_test_features)
rf_accuracy = accuracy_score(y_test_filtered, rf_pred)
print("Random Forest Classifier Accuracy:", rf_accuracy)

knn_classifier = KNeighborsClassifier()
knn_classifier.fit(hog_train_features, y_train_filtered)
knn_pred = knn_classifier.predict(hog_test_features)
knn_accuracy = accuracy_score(y_test_filtered, knn_pred)
print("KNN Classifier Accuracy:", knn_accuracy)

gb_classifier = GradientBoostingClassifier()
gb_classifier.fit(hog_train_features, y_train_filtered)
gb_pred = gb_classifier.predict(hog_test_features)
gb_accuracy = accuracy_score(y_test_filtered, gb_pred)
print("Gradient Boosting Classifier Accuracy:", gb_accuracy)
