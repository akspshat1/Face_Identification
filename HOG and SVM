## code reads the data in the folder
import os
import cv2

lfw_dataset_path = '/content/drive/MyDrive/ML Assignments/lfw_deepfunneled1'

person_directories = [os.path.join(lfw_dataset_path, d) for d in os.listdir(lfw_dataset_path)]

images = []
labels = []

for person_dir in person_directories:
    label = os.path.basename(person_dir)
    image_files = [os.path.join(person_dir, f) for f in os.listdir(person_dir) if f.endswith('.jpg')]
    for image_file in image_files:
        img = cv2.imread(image_file)
        images.append(img)
        # Append the label (person's name)
        labels.append(label)


print("Number of images:", len(images))
print("Number of unique labels:", len(set(labels)))

## first extract HOG features then used SVM classifier for classifying and calculating accuracy
import cv2
import os
import numpy as np
from skimage.transform import resize
from skimage.feature import hog
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

def compute_hog(img):
    # Convert image to grayscale if it has multiple channels
    if len(img.shape) > 2:
        img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    else:
        img_gray = img
    # Resizing image
    resized_img = resize(img_gray, (128*4, 64*4))
    # Creating HOG features
    fd, _ = hog(resized_img, orientations=9, pixels_per_cell=(8, 8),
                cells_per_block=(2, 2), visualize=True)
    return fd


lfw_dataset_path = '/home/dhyeyfindoriya/Pictures/Images/lfw-deepfunneled/lfw-deepfunneled/lfw_deepfunneled1/'

person_directories = [os.path.join(lfw_dataset_path, d) for d in os.listdir(lfw_dataset_path)]

images = []
labels = []

for label, person_dir in enumerate(person_directories):
    # List all image files in the person directory
    image_files = [os.path.join(person_dir, f) for f in os.listdir(person_dir) if f.endswith('.jpg')]
    # Read and append each image along with its label
    for image_file in image_files:
        img = cv2.imread(image_file)
        hog_features = compute_hog(img)
        images.append(hog_features)
        labels.append(label)
X = np.array(images)
y = np.array(labels)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

svc_classifier = SVC()

param_grid = {
    'C': [0.1, 1, 10],
    'kernel': ['linear', 'rbf', 'poly'],
    'gamma': ['scale', 'auto']
}

grid_search = GridSearchCV(svc_classifier, param_grid, cv=5)
grid_search.fit(X_train, y_train)

best_params = grid_search.best_params_

best_svc_classifier = SVC(**best_params)
best_svc_classifier.fit(X_train, y_train)

y_pred = best_svc_classifier.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
